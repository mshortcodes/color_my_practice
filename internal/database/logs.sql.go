// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: logs.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const confirmLogs = `-- name: ConfirmLogs :many
UPDATE logs
SET confirmed = true
WHERE user_id = $1
AND id = ANY($2::UUID[])
RETURNING id, date, color_depth, confirmed, user_id
`

type ConfirmLogsParams struct {
	UserID  uuid.UUID
	Column2 []uuid.UUID
}

func (q *Queries) ConfirmLogs(ctx context.Context, arg ConfirmLogsParams) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, confirmLogs, arg.UserID, pq.Array(arg.Column2))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.ColorDepth,
			&i.Confirmed,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createLog = `-- name: CreateLog :one
INSERT INTO logs (id, date, color_depth, user_id)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3
)
RETURNING id, date, color_depth, confirmed, user_id
`

type CreateLogParams struct {
	Date       time.Time
	ColorDepth int32
	UserID     uuid.UUID
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, createLog, arg.Date, arg.ColorDepth, arg.UserID)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.ColorDepth,
		&i.Confirmed,
		&i.UserID,
	)
	return i, err
}

const deleteLog = `-- name: DeleteLog :exec
DELETE FROM logs
WHERE id = $1
`

func (q *Queries) DeleteLog(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLog, id)
	return err
}

const getLog = `-- name: GetLog :one
SELECT id, date, color_depth, confirmed, user_id FROM logs
WHERE id = $1
`

func (q *Queries) GetLog(ctx context.Context, id uuid.UUID) (Log, error) {
	row := q.db.QueryRowContext(ctx, getLog, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.ColorDepth,
		&i.Confirmed,
		&i.UserID,
	)
	return i, err
}

const getLogs = `-- name: GetLogs :many
SELECT id, date, color_depth, confirmed, user_id FROM logs
ORDER BY date DESC
`

func (q *Queries) GetLogs(ctx context.Context) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, getLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.ColorDepth,
			&i.Confirmed,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
